name: "Windows Build and Package"

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Version tag"
        required: true
        default: "v0.0.1"
      release:
        description: "Do a release?"
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      sign:
        required: false
        default: false
        type: boolean
      notarize:
        required: false
        default: false
        type: boolean
      release:
        required: false
        default: false
        type: boolean
    secrets:
      SIGN_WINDOWS_CERT:
        required: false
        description: "Windows signing certificate"
      SIGN_WINDOWS_CERT_PASSWORD:
        required: false
        description: "Windows signing certificate password"

jobs:
  build-nsis:
    runs-on: windows-2022
    timeout-minutes: 30
    strategy:
      matrix:
        platform:
          - windows/amd64
    permissions:
      contents: write
    env:
      SIGN_WINDOWS_CERT: ${{ secrets.SIGN_WINDOWS_CERT || '' }}
      SIGN_WINDOWS_CERT_PASSWORD: ${{ secrets.SIGN_WINDOWS_CERT_PASSWORD || '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Setup Environment Variables
        uses: ./.github/actions/setup-env

      - name: Setup Tools
        uses: ./.github/actions/setup-tools

      - name: Set pkg path
        shell: bash
        run: |
          echo "FINAL_PKG_PATH=build/bin/${COMMON_BUILD_NAME}-win-amd64-${VERSION_TAG}-installer.exe" >> $GITHUB_ENV

      - name: Build Windows App
        working-directory: ${{ env.COMMON_APP_WORKING_DIRECTORY }}
        shell: bash
        run: ${{ env.WIN_BUILD_COMMAND }}

      - name: Sign Windows binaries
        if: ${{ env.SIGN_WINDOWS_CERT != '' }}
        shell: powershell
        working-directory: ${{ env.COMMON_APP_WORKING_DIRECTORY }}
        run: |
          Write-Host "Creating certificate file"
          New-Item -ItemType directory -Path certificate -Force
          Set-Content -Path certificate\certificate.txt -Value '${{ env.SIGN_WINDOWS_CERT }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          Write-Host "Signing our binaries"
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /tr http://ts.ssl.com /f certificate\certificate.pfx /p '${{ env.SIGN_WINDOWS_CERT_PASSWORD }}' .\build\bin\${{ env.COMMON_BUILD_NAME }}.exe
          Write-Host "Signing Installer"
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /tr http://ts.ssl.com /f certificate\certificate.pfx /p '${{ env.SIGN_WINDOWS_CERT_PASSWORD }}' .\build\bin\${{ env.COMMON_BUILD_NAME }}-amd64-installer.exe

      - name: Copy file
        shell: bash
        run: cp "${WIN_INSTALLER_PATH}" "${FINAL_PKG_PATH}"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: ${{ env.RELEASE_MODE != 'true' }}
        with:
          name: ${{ env.COMMON_BUILD_NAME }}-win-amd64-${{ env.VERSION_TAG }}
          path: |
            ${{ env.FINAL_PKG_PATH }}

      - name: Release
        uses: softprops/action-gh-release@v2
        if: ${{ env.RELEASE_MODE == 'true' }}
        with:
          tag_name: ${{ env.VERSION_TAG }}
          files: |
            ${{ env.FINAL_PKG_PATH }}
