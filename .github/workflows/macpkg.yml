name: "MacOS Build and Package"

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Version tag"
        required: true
        default: "v0.0.1"
      sign:
        description: "Sign the build?"
        required: false
        default: false
        type: boolean
      notarize:
        description: "Notarize the build?"
        required: false
        default: false
        type: boolean
      release:
        description: "Do a release?"
        required: false
        default: false
        type: boolean

  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      sign:
        required: false
        default: false
        type: boolean
      notarize:
        required: false
        default: false
        type: boolean
      release:
        required: false
        default: false
        type: boolean
    secrets:
      MACOS_SIGN_APPLE_USERNAME:
        required: false
      MACOS_SIGN_APPLE_TEAM_ID:
        required: false
      MACOS_SIGN_APPLE_DEVELOPER_IDENTITY:
        required: false
      MACOS_SIGN_APPLE_APP_PASSWORD:
        required: false
      MACOS_SIGN_APP_CERT:
        required: false
      MACOS_SIGN_APP_CERT_PASSWORD:
        required: false
      MACOS_SIGN_INSTALLER_ID:
        required: false
      MACOS_SIGN_INSTALLER_CERT:
        required: false
      MACOS_SIGN_INSTALLER_CERT_PASSWORD:
        required: false

jobs:
  build-macos:
    runs-on: macos-latest
    timeout-minutes: 30
    strategy:
      matrix:
        platform:
          - darwin/universal
    permissions:
      contents: write
    env:
      SIGN_INPUT: ${{ github.event.inputs.sign }}
      NOTARIZE_INPUT: ${{ github.event.inputs.notarize }}
      MACOS_SIGN_APPLE_USERNAME: ${{ secrets.MACOS_SIGN_APPLE_USERNAME }}
      MACOS_SIGN_APPLE_TEAM_ID: ${{ secrets.MACOS_SIGN_APPLE_TEAM_ID || '' }}
      MACOS_SIGN_APPLE_DEVELOPER_IDENTITY: ${{ secrets.MACOS_SIGN_APPLE_DEVELOPER_IDENTITY || '' }}
      MACOS_SIGN_APPLE_APP_PASSWORD: ${{ secrets.MACOS_SIGN_APPLE_APP_PASSWORD || '' }}
      MACOS_SIGN_APP_CERT: ${{ secrets.MACOS_SIGN_APP_CERT || '' }}
      MACOS_SIGN_APP_CERT_PASSWORD: ${{ secrets.MACOS_SIGN_APP_CERT_PASSWORD || '' }}
      MACOS_SIGN_INSTALLER_ID: ${{ secrets.MACOS_SIGN_INSTALLER_ID || '' }}
      MACOS_SIGN_INSTALLER_CERT: ${{ secrets.MACOS_SIGN_INSTALLER_CERT || '' }}
      MACOS_SIGN_INSTALLER_CERT_PASSWORD: ${{ secrets.MACOS_SIGN_INSTALLER_CERT_PASSWORD || '' }}

    steps:
      - name: Check signing and notarization
        id: check_signing_notarization
        shell: bash
        run: |
          # Compute SIGNING_ENABLED
          SIGNING_ENABLED=false
          if [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF}" == refs/tags/* ]]; then
            if [[ -n "${MACOS_SIGN_APPLE_USERNAME}" && -n "${MACOS_SIGN_APPLE_APP_PASSWORD}" && -n "${MACOS_SIGN_APP_CERT}" && -n "${MACOS_SIGN_INSTALLER_ID}" ]]; then
              SIGNING_ENABLED=true
            fi
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" && "${SIGN_INPUT}" == "true" ]]; then
            if [[ -n "${MACOS_SIGN_APPLE_USERNAME}" && -n "${MACOS_SIGN_APPLE_APP_PASSWORD}" && -n "${MACOS_SIGN_APP_CERT}" && -n "${MACOS_SIGN_INSTALLER_ID}" ]]; then
              SIGNING_ENABLED=true
            fi
          fi

          # Compute NOTARIZE_ENABLED (only if SIGNING_ENABLED is true)
          NOTARIZE_ENABLED=false
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" && "${NOTARIZE_INPUT}" == "true" && "${SIGN_INPUT}" == "true" ]]; then
            if [[ -n "${MACOS_SIGN_APPLE_USERNAME}" && -n "${MACOS_SIGN_APPLE_APP_PASSWORD}" && -n "${MACOS_SIGN_APP_CERT}" && -n "${MACOS_SIGN_INSTALLER_ID}" ]]; then
              NOTARIZE_ENABLED=true
            fi
          fi

          echo "SIGNING_ENABLED=${SIGNING_ENABLED}" >> $GITHUB_ENV
          echo "NOTARIZE_ENABLED=${NOTARIZE_ENABLED}" >> $GITHUB_ENV

          echo "SIGNING_ENABLED: ${SIGNING_ENABLED}"
          echo "NOTARIZE_ENABLED: ${NOTARIZE_ENABLED}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Setup Environment Variables
        uses: ./.github/actions/setup-env

      - name: Setup Tools
        uses: ./.github/actions/setup-tools

      - name: Set pkg path
        shell: bash
        run: |
          echo "FINAL_PKG_PATH=build/bin/${COMMON_BUILD_NAME}-macos-universal-${VERSION_TAG}.pkg" >> $GITHUB_ENV

      - name: Install macOS Wails deps
        shell: bash
        run: brew install Bearer/tap/gon

      # Import certs only if signing is enabled
      - name: Import Code-Signing Certificates for macOS
        if: ${{ env.SIGNING_ENABLED == 'true' }}
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          keychain-password: ${{ env.MACOS_SIGN_APPLE_APP_PASSWORD }}
          p12-file-base64: ${{ env.MACOS_SIGN_APP_CERT }}
          p12-password: ${{ env.MACOS_SIGN_APP_CERT_PASSWORD }}

      - name: Import Code-Signing Certificates for macOS installer
        if: ${{ env.SIGNING_ENABLED == 'true' }}
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          keychain-password: ${{ env.MACOS_SIGN_APPLE_APP_PASSWORD }}
          p12-file-base64: ${{ env.MACOS_SIGN_INSTALLER_CERT }}
          p12-password: ${{ env.MACOS_SIGN_INSTALLER_CERT_PASSWORD }}
          create-keychain: false

      - name: Build / Sign / Notarize
        shell: bash
        run: |
          set -e
          SIGN_FLAGS=""
          NOTARIZE_FLAGS=""
          if [[ "${SIGNING_ENABLED}" == "true" ]]; then
            SIGN_FLAGS="--sign"
          fi
          if [[ "${NOTARIZE_ENABLED}" == "true" ]]; then
            NOTARIZE_FLAGS="--notarize"
          fi
          echo "SIGN_FLAGS: ${SIGN_FLAGS}"
          echo "NOTARIZE_FLAGS: ${NOTARIZE_FLAGS}"
          ./build/darwin/build_sign_notarize.sh --version "${VERSION_TAG}" ${SIGN_FLAGS} ${NOTARIZE_FLAGS}

      - name: Copy file
        shell: bash
        run: cp "${MACOS_PKG_BUNDLE_PATH}" "${FINAL_PKG_PATH}"

      - name: Add macOS permissions
        working-directory: ${{ env.COMMON_APP_WORKING_DIRECTORY }}
        shell: bash
        run: chmod +x build/bin/*/Contents/MacOS/*

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: ${{ env.RELEASE_MODE != 'true' }}
        with:
          name: ${{ env.COMMON_BUILD_NAME }}-macos-universal-${{ env.VERSION_TAG }}
          path: |
            ${{ env.FINAL_PKG_PATH }}

      - name: Release
        uses: softprops/action-gh-release@v2
        if: ${{ env.RELEASE_MODE == 'true' }}
        with:
          tag_name: ${{ env.VERSION_TAG }}
          files: |
            ${{ env.FINAL_PKG_PATH }}
